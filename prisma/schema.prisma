generator client {
    provider = "prisma-client-js"
}

datasource db {
    provider = "postgresql"
    url      = env("DATABASE_URL")
}

model User {
    id        String @id @default(cuid())
    firstName String
    lastName  String
    email     String @unique
    // emailVerified DateTime? // TODO: Add email verification
    // image     String? // TODO: Add profile pictures
    password  String

    ownedProjects Project[]
    projects      Project[] @relation("ProjectUsers")

    createdTasks  Task[] @relation("TaskCreatedBy")
    assignedTasks Task[] @relation("TaskAsignee")
}

model Project {
    id        String   @id @default(cuid())
    name      String
    ticker    String
    createdAt DateTime @default(now())
    updatedAt DateTime @updatedAt

    owner   User   @relation(fields: [ownerId], references: [id])
    ownerId String

    users User[] @relation("ProjectUsers")

    tasks  Task[]
    sprint Sprint[]
}

enum TaskType {
    TASK
    BUG
    FEATURE
    STORY
}

enum TaskStatus {
    TODO
    IN_PROGRESS
    IN_REVIEW
    DONE
}

model Task {
    id          String   @id @default(cuid())
    ticker      String
    title       String
    description String?
    type        TaskType
    createdAt   DateTime @default(now())
    updatedAt   DateTime @updatedAt
    createdBy   User     @relation(name: "TaskCreatedBy", fields: [createdById], references: [id])
    createdById String

    status      TaskStatus @default(TODO)
    startAt     DateTime?
    doneAt      DateTime?
    storyPoints Int?

    asignee   User?   @relation(name: "TaskAsignee", fields: [asigneeId], references: [id])
    asigneeId String?

    project   Project @relation(fields: [projectId], references: [id], onDelete: Cascade)
    projectId String
    Sprint    Sprint? @relation(fields: [sprintId], references: [id])
    sprintId  String?
}

model Sprint {
    id        String   @id @default(cuid())
    name      String
    goal      String?
    isActive  Boolean  @default(true)
    createdAt DateTime @default(now())
    updatedAt DateTime @updatedAt

    startAt DateTime
    endAt   DateTime

    project   Project @relation(fields: [projectId], references: [id])
    projectId String

    tasks Task[]
}
