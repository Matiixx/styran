generator client {
    provider = "prisma-client-js"
}

datasource db {
    provider = "postgresql"
    url      = env("DATABASE_URL")
}

model User {
    id        String   @id @default(cuid())
    createdAt DateTime @default(now())
    firstName String
    lastName  String
    email     String   @unique
    // emailVerified DateTime? // TODO: Add email verification
    // image     String? // TODO: Add profile pictures
    password  String

    location String?
    jobTitle String?
    bio      String?

    discordWebhookUrl String?

    ownedProjects Project[]
    projects      Project[] @relation("ProjectUsers")

    createdTasks  Task[]        @relation("TaskCreatedBy")
    assignedTasks Task[]        @relation("TaskAsignee")
    TaskComment   TaskComment[]
    TimeTrack     TimeTrack[]
    ActivityLog   ActivityLog[]
}

model Project {
    id                String   @id @default(cuid())
    name              String
    ticker            String
    createdAt         DateTime @default(now())
    updatedAt         DateTime @updatedAt
    timezone          Int
    description       String?
    discordWebhookUrl String?
    customTaskTypes   String[]

    owner   User   @relation(fields: [ownerId], references: [id])
    ownerId String

    users User[] @relation("ProjectUsers")

    tasks       Task[]
    sprint      Sprint[]
    ActivityLog ActivityLog[]
}

enum TaskType {
    TASK
    BUG
    FEATURE
    STORY
    CUSTOM
}

enum TaskStatus {
    TODO
    IN_PROGRESS
    IN_REVIEW
    DONE
}

enum TaskPriority {
    NONE
    LOW
    MEDIUM
    HIGH
}

model Task {
    id          String   @id @default(cuid())
    ticker      String
    title       String
    description String?
    type        TaskType
    customType  String? // Used when type is CUSTOM
    createdAt   DateTime @default(now())
    updatedAt   DateTime @updatedAt
    createdBy   User     @relation(name: "TaskCreatedBy", fields: [createdById], references: [id])
    createdById String

    priority    TaskPriority? @default(NONE)
    status      TaskStatus    @default(TODO)
    startAt     DateTime?
    doneAt      DateTime?
    storyPoints Int?

    asignee   User?   @relation(name: "TaskAsignee", fields: [asigneeId], references: [id])
    asigneeId String?

    project   Project @relation(fields: [projectId], references: [id], onDelete: Cascade)
    projectId String
    Sprint    Sprint? @relation(fields: [sprintId], references: [id])
    sprintId  String?

    TaskComment TaskComment[]
    TimeTrack   TimeTrack[]
    ActivityLog ActivityLog[]
}

model Sprint {
    id        String   @id @default(cuid())
    name      String
    goal      String?
    isActive  Boolean  @default(true)
    createdAt DateTime @default(now())
    updatedAt DateTime @updatedAt

    startAt DateTime
    endAt   DateTime

    project   Project @relation(fields: [projectId], references: [id], onDelete: Cascade)
    projectId String

    tasks       Task[]
    ActivityLog ActivityLog[]
}

model TaskComment {
    id        String   @id @default(cuid())
    createdAt DateTime @default(now())
    updatedAt DateTime @updatedAt

    task   Task   @relation(fields: [taskId], references: [id], onDelete: Cascade)
    taskId String

    user   User   @relation(fields: [userId], references: [id])
    userId String

    content String
}

model TimeTrack {
    id        String   @id @default(cuid())
    createdAt DateTime @default(now())
    updatedAt DateTime @updatedAt

    startTime DateTime
    endTime   DateTime?

    task   Task   @relation(fields: [taskId], references: [id], onDelete: Cascade)
    taskId String

    user   User   @relation(fields: [userId], references: [id])
    userId String
}

model ActivityLog {
    id        String   @id @default(cuid())
    createdAt DateTime @default(now())

    activityType String
    description  String

    user   User   @relation(fields: [userId], references: [id])
    userId String

    project   Project @relation(fields: [projectId], references: [id], onDelete: Cascade)
    projectId String

    taskId    String?
    task      Task?   @relation(fields: [taskId], references: [id])
    sprintId  String?
    sprint    Sprint? @relation(fields: [sprintId], references: [id])
    commentId String?

    oldValue String?
    newValue String?
}
